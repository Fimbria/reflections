How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	It omitted all unchanged lines and brought up only the lines edited. This helped catch easy typos. In longer changes, this would also make it easier to find all changes and evaluate their effects on the code.

How could having easy access to the entire history of a file make you a better
programmer in the long term?

	It would allow me to see how other programmers operate and let me learn from their example.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
    
	If there were many changes, automatic versions could produce a lot of useless junk. It would also produce many versions that were completely non-functional. Automatic saving would help against a failure to save, but programmers are more concerned with final products than any stage of the process.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	For some projects, files refer to each other, so it makes sense to keep groups of changes together. For other projects, each file is independent, so the changes can be evaluated independently.

How can you use the commands git log and git diff to view the history of files?
    
	git log
	diff -u <file1> <file2>     (non-git version)
	git diff <versionID1> <versionID2>      (git version)

How might using version control make you more confident to make changes that
could break something?
    
	I can always revert to a version that works.

Now that you have your workspace set up, what do you want to try using Git for?

	My brother's got a project on GitHub. I want to try it, see if it works, comment his code, and ultimately make additions.

How is the staging area different from your working directory and the repository? What value do you think it offers?

	The staging area allows the user to collect files to commit them all at once. This is an improvement over collecting all files and committing everything, including irrelevant files such as notes and test programs.